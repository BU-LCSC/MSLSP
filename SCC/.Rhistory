tile <- '18TYN'
jsonFile  <- "/usr2/postdoc/dbolt/CodeFolder/git_repos/MSLSP/MSLSP_Parameters.json"
jsonFile <- "~/test.json"
#Get default parameters
params <- fromJSON(file=jsonFile)
#Pull paths for AWS or SCC?
if (params$setup$AWS_or_SCC == 'SCC') {
params$setup$rFunctions <- params$SCC$rFunctions
params$setup$productTable <- params$SCC$productTable
params$setup$fmaskFunction <- params$SCC$fmaskFunction
params$setup$numCores <- params$SCC$numCores
params$setup$numChunks <- params$SCC$numChunks
} else {
params$setup$rFunctions <- params$AWS$rFunctions
params$setup$productTable <- params$AWS$productTable
params$setup$fmaskFunction <- params$AWS$fmaskFunction
params$setup$numCores <- params$AWS$numCores
params$setup$numChunks <- params$AWS$numChunks}
rint('Loading packages')
print('')
print('')
library(raster)
library(rgdal)
library(gdalUtils)
library(rgeos)
library(imager)   #needed for efficient distance to snow calculate
library(ncdf4)
library(iterators)
library(foreach)
library(doMC)
library(matrixStats)
library(WGCNA)
library(zoo)
library(RcppRoll)
library(rjson)
#Get default parameters
params <- fromJSON(file=jsonFile)
#Pull paths for AWS or SCC?
if (params$setup$AWS_or_SCC == 'SCC') {
params$setup$rFunctions <- params$SCC$rFunctions
params$setup$productTable <- params$SCC$productTable
params$setup$fmaskFunction <- params$SCC$fmaskFunction
params$setup$numCores <- params$SCC$numCores
params$setup$numChunks <- params$SCC$numChunks
} else {
params$setup$rFunctions <- params$AWS$rFunctions
params$setup$productTable <- params$AWS$productTable
params$setup$fmaskFunction <- params$AWS$fmaskFunction
params$setup$numCores <- params$AWS$numCores
params$setup$numChunks <- params$AWS$numChunks}
#Load functions
source(file=params$setup$rFunctions)
#Register the parallel ba
time_step1 <- 0
time_step2 <- 0
#Set up data
#####################################################
#Pull a few variables
imgStartYr <- params$setup$imgStartYr
imgEndYr <- params$setup$imgEndYr
phenStartYr <- params$setup$phenStartYr
phenEndYr <- params$setup$phenEndYr
numChunks <- params$setup$numChunks
#
params$phenology_parameters$dormStart <- as.Date(params$phenology_parameters$dormStart)
params$phenology_parameters$dormEnd <- as.Date(params$phenology_parameters$dormEnd)
#Sort product table
############################
productTable <- read.csv(params$setup$productTable,header=T,stringsAsFactors = F)
params$phenology_parameters$numLyrs <- sum(!is.na(productTable$calc_lyr))
params$phenology_parameters$numLyrsCycle2 <- length(grep('_2',productTable$short_name[!is.na(productTable$calc_lyr)]))
#Location of specific layers for which we will product outputs for ALL pixels (regardless of having phenology)
params$phenology_parameters$loc_numCycles <- productTable$calc_lyr[productTable$short_name == 'NumCycles']
params$phenology_parameters$loc_max <- productTable$calc_lyr[productTable$short_name == 'EVImax']
params$phenology_parameters$loc_amp <- productTable$calc_lyr[productTable$short_name == 'EVIamp']
params$phenology_parameters$loc_numObs <- productTable$calc_lyr[productTable$short_name == 'numObs']
params$phenology_parameters$loc_numObs_count_snow <- productTable$calc_lyr[productTable$short_name == 'numObsCountSnow']
params$phenology_parameters$loc_maxGap <- productTable$calc_lyr[productTable$short_name == 'maxGap']
params$phenology_parameters$loc_maxGap_count_snow <- productTable$calc_lyr[productTable$short_name == 'maxGapCountSnow']
#If we are running S10, set resolution to 10m. Otherwise, doing things at 30m
if (params$setup$AWS_or_SCC == "SCC" & params$SCC$runS10) {params$setup$image_res <- 10} else {params$setup$image_res <- 30}
#Sort years
######################
imgYrs <- imgStartYr:imgEndYr        #What years will we consider for time-series filling?
phenYrs <- phenStartYr:phenEndYr     #What years will we calculate phenology for?
#Get full image list
###########
imgList <- list.files(path=params$dirs$imgDir, pattern=glob2rx("HLS*.hdf"), full.names=T)
#Get the year and doy of each image. Restrict to time period of interest
##########################
sensor <- matrix(NA,length(imgList),1)
yrdoy = as.numeric(matrix(NA,length(imgList),1))
for (i in 1:length(imgList)) {
imgName_strip = tail(unlist(strsplit(imgList[i],'/')),n = 1)
sensor[i] <- unlist(strsplit(imgName_strip,'.',fixed = T))[2]
yrdoy[i]= unlist(strsplit(imgName_strip,'.',fixed = T))[4]}
doys <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%j'))
years <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%Y'))
keep <- (years >= (imgStartYr - 1)) & (years <= (imgEndYr + 1))  #Only keep imagery +/- 1 (need 6 month buffer)
imgList <- imgList[keep]
yrdoy <- yrdoy[keep]
doys <- doys[keep]
years <- years[keep]
sensor <- sensor[keep]
(params$setup$includeLandsat & params$setup$includeSentinel)
(!params$setup$includeLandsat)
sensor != 'L30'
###########
imgList <- list.files(path=params$dirs$imgDir, pattern=glob2rx("HLS*.hdf"), full.names=T)
#Get the year and doy of each image. Restrict to time period of interest
##########################
sensor <- matrix(NA,length(imgList),1)
yrdoy = as.numeric(matrix(NA,length(imgList),1))
for (i in 1:length(imgList)) {
imgName_strip = tail(unlist(strsplit(imgList[i],'/')),n = 1)
sensor[i] <- unlist(strsplit(imgName_strip,'.',fixed = T))[2]
yrdoy[i]= unlist(strsplit(imgName_strip,'.',fixed = T))[4]}
doys <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%j'))
years <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%Y'))
keep <- (years >= (imgStartYr - 1)) & (years <= (imgEndYr + 1))  #Only keep imagery +/- 1 (need 6 month buffer)
#Deterime which data to keep
if (!params$setup$includeLandsat) {drop <- sensor == 'L30'; keep[drop] <- FALSE}
if (!params$setup$includeSentinel) {drop <- sensor == 'S30'; keep[drop] <- FALSE}
imgList <- imgList[keep]
yrdoy <- yrdoy[keep]
doys <- doys[keep]
years <- years[keep]
sensor <- sensor[keep]
sensor
drop <- sensor == 'L30'; keep[drop] <- FALSE
drop <- sensor == 'S30'; keep[drop] <- FALSE
#Get full image list
###########
imgList <- list.files(path=params$dirs$imgDir, pattern=glob2rx("HLS*.hdf"), full.names=T)
#Get the year and doy of each image. Restrict to time period of interest
##########################
sensor <- matrix(NA,length(imgList),1)
yrdoy = as.numeric(matrix(NA,length(imgList),1))
for (i in 1:length(imgList)) {
imgName_strip = tail(unlist(strsplit(imgList[i],'/')),n = 1)
sensor[i] <- unlist(strsplit(imgName_strip,'.',fixed = T))[2]
yrdoy[i]= unlist(strsplit(imgName_strip,'.',fixed = T))[4]}
doys <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%j'))
years <- as.numeric(format(as.Date(strptime(yrdoy, format="%Y%j")),'%Y'))
keep <- (years >= (imgStartYr - 1)) & (years <= (imgEndYr + 1))  #Only keep imagery +/- 1 (need 6 month buffer)
drop <- sensor == 'L30'; keep[drop] <- FALSE
drop <- sensor == 'S30'; keep[drop] <- FALSE
drop <- sensor == 'S10'; keep[drop] <- FALSE
imgList <- imgList[keep]
yrdoy <- yrdoy[keep]
doys <- doys[keep]
years <- years[keep]
sensor <- sensor[keep]
sensor
